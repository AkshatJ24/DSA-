# 1. Sorting Algorithms
DAY 1 : 

** SELECTION SORT

ublic class Solution {
    static void selection_sort(int arr[], int n) {
        for (int i = 0; i < n - 1; i++) {
            int mini = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[mini]) {
                    mini = j;
                }
            }
            //swap
            int temp = arr[mini];
            arr[mini] = arr[i];
            arr[i] = temp;
        }
        System.out.println("After selection sort:");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }        
    
** BUBBLE SORT

public class tUf {
    static void bubble_sort(int[] arr, int n) {
        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j <= i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        System.out.println("After bubble sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

** INSERTION SORT

ublic class Main {
    static void insertion_sort(int[] arr, int n) {
        for (int i = 0; i <= n - 1; i++) {
            int j = i;
            while (j > 0 && arr[j - 1] > arr[j]) {
                int temp = arr[j - 1];
                arr[j - 1] = arr[j];
                arr[j] = temp;
                j--;
            }
        }
        System.out.println("After insertion sort: ");

  
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

  DAY 2 

  ** Merge Sort
  class Solution {
    
    void merge(int arr[], int l, int mid, int r){
        ArrayList<Integer> temp = new ArrayList<>();
        int left = l;
        int right = mid + 1;
        
        while(left <= mid && right <= r){
            if(arr[left]<=arr[right]){
                temp.add(arr[left]);
                left++;
            }
            else {
                temp.add(arr[right]);
                right++;
            }
        }
        
        while(left<=mid){
            temp.add(arr[left]);
            left++;
        }
        
        while(right<=r){
            temp.add(arr[right]);
            right++;
        }
        
        for(int i = l; i < r + 1; i++){
            arr[i] = temp.get(i-l);
        }
    }

    void mergeSort(int arr[], int l, int r) {
       
        if (l >= r) return;
        int mid = (l + r) / 2 ;
        mergeSort(arr, l, mid);  
        mergeSort(arr, mid + 1, r);
        merge(arr, l, mid, r);
    }
    
    void Ms(int arr[], int n){
        mergeSort(arr,0,n-1);
    }
}

DAY 3

** Quick Sort
class Solution {
    // Function to sort an array using quick sort algorithm.
    static void quickSort(int arr[], int low, int high) {
        if(low < high){
            int pIndex = partition(arr,low,high);
            quickSort(arr,low,pIndex - 1);
            quickSort(arr,pIndex + 1,high);
        }
        
    }

    static int partition(int arr[], int low, int high) {
        int pivot = arr[low];
        int i = low;
        int j = high;
        while (i < j) {
            while (arr[i] <= pivot && i <= high - 1) {
                i++;
            }
            while (arr[j] > pivot && j >= low + 1) {
                j--;
            }
            if (i < j) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[low];
        arr[low] = arr[j];
        arr[j] = temp;
        return j;
    }

    
    public static int[] qs(int arr[]){
        quickSort(arr,0,arr.length - 1);
        return arr;
    }
}

